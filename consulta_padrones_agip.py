# -*- coding: utf-8 -*-
"""consulta_padrones_AGIP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SioqXIHCDtswVG7HMKOHD6neHAYN8epZ
"""

import pandas as pd
import gdown
import streamlit as st
from io import BytesIO

#DRIVE: https://drive.google.com/file/d/1V1DVHny9c3-i1EkczW_T-jFqbh1Lwk8m/view?usp=sharing

file_id = "1V1DVHny9c3-i1EkczW_T-jFqbh1Lwk8m"

url = f"https://drive.google.com/uc?id={file_id}"

output = "padron_AGIP.csv"

gdown.download(url, output, quiet=False)

columns = ["F_CONSULTA", "F_DESDE", "F_HASTA", "CUIT", "A0", "A1", "A2", "ALICUOTA_PERCEPCIONES", "ALICUOTA_RETENCIONES", "A3", "A4", "RAZON_SOCIAL"]

padron_AGIP = pd.read_csv("padron_AGIP.csv", sep = ";", names = columns, encoding= "latin1")
padron_AGIP.head()

# Funci√≥n para filtrar por CUIT
def buscar_cuits(padron, lista_cuits):
    return padron[padron['CUIT'].isin(lista_cuits)][["CUIT", "ALICUOTA_PERCEPCIONES", "ALICUOTA_RETENCIONES"]]

# Funci√≥n para generar archivo Excel
def generar_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Resultado')
    output.seek(0)
    return output

# Interfaz Streamlit
st.title("Consulta de Al√≠cuotas AGIP por CUIT")

opcion = st.radio("¬øC√≥mo quer√©s consultar?", ["Individual", "Por lote (.txt)"])

if opcion == "Individual":
    cuit = st.text_input("Ingres√° el CUIT (sin guiones ni puntos):")

    if st.button("Consultar"):
        if cuit.isnumeric() and len(cuit) == 11:
            resultado = buscar_cuits(padron_AGIP, [int(cuit)])
            if not resultado.empty:
                st.success("Resultado:")
                st.dataframe(resultado)
            else:
                st.warning("CUIT no encontrado en el padr√≥n.")
        else:
            st.error("El CUIT debe tener 11 d√≠gitos num√©ricos.")

else:
    archivo = st.file_uploader("Sub√≠ el archivo .txt con los CUITs (uno por l√≠nea)", type=["txt"])

    if archivo is not None:
        contenido = archivo.read().decode("utf-8", errors="ignore")
        lista_cuits = [int(line.strip()) for line in contenido.strip().splitlines() if line.strip().isdigit()]

        resultado_lote = buscar_cuits(padron_AGIP, lista_cuits)

        if not resultado_lote.empty:
            st.success("Resultados encontrados:")
            st.dataframe(resultado_lote)

            excel_data = generar_excel(resultado_lote)
            st.download_button("üì• Descargar resultados en Excel", data=excel_data, file_name="resultado_agip.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        else:
            st.warning("Ning√∫n CUIT del archivo fue encontrado en el padr√≥n.")